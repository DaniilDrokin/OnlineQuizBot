import asyncio
import sqlite3
from datetime import date
import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from tok_en import TOKEN


DB_PATH_USER = 'db/user_db.db'
DB_PATH_EGE = 'db/questions1.db'

API_TOKEN = TOKEN

loop = asyncio.get_event_loop()
bot = Bot(token=TOKEN, loop=loop)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class User(StatesGroup):
    examen = State()
    predmet = State()
    answer = State()
    end_ans = State()
    wast_ans = State()


def get_today_int():
    t = date.today()
    return t.day + t.month * 100 + t.year * 10000


def add_user_to_db(cursor, message: types.Message):
    t = get_today_int()
    cursor.execute(f"INSERT INTO users VALUES(?,?,?,?,?,?,?)", (message.from_user.id, message.from_user.first_name, 0, 0, 0, 0, t)).fetchone()


def update_right_ans(cursor, message: types.Message):
    dbToday = cursor.execute(f'SELECT today FROM users WHERE user_id={message.from_user.id}').fetchone()[0]
    t = get_today_int()
    if(dbToday != t):
        cursor.execute(f"UPDATE users SET right_today = 0 WHERE user_id = {message.from_user.id}")
        cursor.execute(f"UPDATE users SET today = {t} WHERE user_id = {message.from_user.id}")


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await User.examen.set()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item0 = types.KeyboardButton('/start')
    item1 = types.KeyboardButton('/stats')
    item2 = types.KeyboardButton('/help')
    item3 = types.KeyboardButton('/participate')
    item4 = types.KeyboardButton('/bestofthebest')
    item5 = types.KeyboardButton('/thebest')
    markup.add(item0, item1, item2, item3, item4, item5)
    db = sqlite3.connect(DB_PATH_USER)
    cdb = db.cursor()
    cdb.execute(f"SELECT user_id FROM users WHERE user_id = '{message.from_user.id}'")
    if cdb.fetchone() is None:
        add_user_to_db(cdb, message)
        db.commit()
    db.close()
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!",
                         reply_markup=markup)


@dp.message_handler(state='*', commands=['help'])
@dp.message_handler(lambda message: message.text.lower() == 'help', state='*')
async def help_handler(message: types.Message):
    await bot.send_message(message.from_user.id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n'
                                                 '–ö–Ω–æ–ø–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ:\n/start –¥–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ '
                                                 '–º–µ–Ω—é –∏–ª–∏ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã;\n/participate –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ;\n/stats –¥–ª—è'
                                                 '–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏;\n/bestofthebest –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞'
                                                 '–ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤;\n/thebest –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–Ω—è.\n'
                                                 '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n'
                                                 '1) –ö–∞–∂–¥–∞—è –∏–≥—Ä–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–Ω–ª–∞–π–Ω-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é'
                                                 '–≤ –æ–¥–∏–Ω –¥–µ–Ω—å. –í –ª—é–±–æ–µ –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ—Ç–≤–µ—Ç—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n'
                                                 '2) –û—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∂–¥—ã–π –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –º–æ–∂–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥,'
                                                 '–ø—Ä–∞–≤–æ –Ω–∞ –æ—à–∏–±–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—Ç–≤–µ—Ç–∞ —Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è —Ç–∞–∫ –∂–µ, –∫–∞–∫'
                                                 '–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.\n3) –í –∏–≥—Ä–µ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã –ø–æ–¥—Å–∫–∞–∑–∫–∏.\n'
                                                 '4) –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –ª–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—è—Ç–∏ –ª—É—á—à–∏—Ö '
                                                 '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏.\n'
                                                 '5) –í –æ–Ω–ª–∞–π–Ω-–≤–∏–∫—Ç–æ—Ä–∏–Ω–µ –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –∏–≥—Ä–∞–µ—Ç –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å: –æ—Ç–≤–µ—Ç—ã,'
                                                 '–≤–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–µ–≥—Ä–∞–º–æ—Ç–Ω–æ, –Ω–µ –º–æ–≥—É—Ç —è–≤–ª—è—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏. –ë—É–∫–≤—ã "–µ"'
                                                 '–∏ "—ë" —Å—á–∏—Ç–∞—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ (–Ω–µ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±—É–∫–≤—É "—ë", '
                                                 '–ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–æ–π, –∑–∞–≥–ª–∞–≤–Ω—ã–µ'
                                                 '–∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏.\n'
                                                 '6) –í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–∫—É, –∏–Ω–∞—á–µ –æ—Ç–≤–µ—Ç'
                                                 '–Ω–µ –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º.\n'
                                                 '7) –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–∏—Å–∞—Ç—å –ª–∞—Ç–∏–Ω—Å–∫–∏–º–∏ '
                                                 '–±—É–∫–≤–∞–º–∏ (–Ω–µ —Ü–∏—Ñ—Ä–∞–º–∏).\n'
                           )


@dp.message_handler(state='*', commands=['stats'])
@dp.message_handler(lambda message: message.text.lower() == 'stats', state='*')
async def stats_handler(message: types.Message):
    db = sqlite3.connect(DB_PATH_USER)
    cdb = db.cursor()
    cdb.execute(f"SELECT user_id FROM users WHERE user_id = '{message.from_user.id}'")
    if cdb.fetchone() is None:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('/start')
        markup.add(item1)
        add_user_to_db(cdb, message)
        db.commit()
        db.close()
        await message.answer('–í—ã –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!–ù–∞–∂–º–∏—Ç–µ /stats –µ—â—ë —Ä–∞–∑(—Ç–∞–∫ –∫–∞–∫ –≤—ã —Å–Ω–∞—á–∞–ª–∞ –Ω–µ –Ω–∞–∂–∞–ª–∏ start)')
    else:
        result = cdb.execute(f"""SELECT all_ans, right_ans, wrong_ans FROM users
                            WHERE user_id = '{message.from_user.id}'""").fetchall()
        for elem in result:
            if elem[0] == 0:
                await bot.send_message(message.from_user.id, md.text(md.text(md.bold('–õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä:')),
                                                                     md.text(' '),
                                                                     md.text('–ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ', md.bold(elem[0])),
                                                                     md.text('–í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ', md.bold(elem[1]),
                                                                             ' (0%)'),
                                                                     md.text(f'–ù–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ', md.bold(elem[2]),
                                                                             ' (0%)'),
                                                                     sep='\n'), parse_mode=ParseMode.MARKDOWN)
            else:
                await bot.send_message(message.from_user.id, md.text(md.text(md.bold('–õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä:')),
                                                                     md.text(' '),
                                                                     md.text('–ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ',
                                                                             md.bold(elem[0])),
                                                                     md.text('–í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ',
                                                                             md.bold(elem[1]),
                                                                             f' ({round((elem[1] / elem[0] * 100), 1)}%)'),
                                                                     md.text(f'–ù–µ–≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ', md.bold(elem[2]),
                                                                             f' ({round((elem[2] / elem[0] * 100), 1)}%)'),
                                                                     sep='\n'), parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(state='*', commands=['participate'])
@dp.message_handler(lambda message: message.text.lower() == '/participate', state=User.examen)
async def process_predmet(message: types.Message, state: FSMContext):
    con = sqlite3.connect(DB_PATH_EGE)
    async with state.proxy() as data:
        data['predmet'] = message.text
        await User.answer.set()
        cur = con.cursor()
        result = cur.execute("""SELECT task, answer FROM ""
                WHERE id IN (SELECT id FROM "" ORDER BY RANDOM() LIMIT 1)""").fetchall()
        for elem in result:
            print(f'{message.from_user.first_name}, {message.from_user.last_name}, {message.from_user.username}: '
                  f'{elem[1]}')
            data['answer'] = elem[1]
            await bot.send_message(message.from_user.id, elem[0])
            await bot.send_message(message.from_user.id, '–í–∞—à –æ—Ç–≤–µ—Ç:', reply_markup=types.ReplyKeyboardRemove())
            global t
            t = loop.call_later(60, lambda: asyncio.ensure_future(waitThenPrintNoAnswer(message)))
        con.close()


async def waitThenPrintNoAnswer(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å')
    db = sqlite3.connect(DB_PATH_USER)
    cdb = db.cursor()
    cdb.execute(f"UPDATE users SET all_ans = all_ans + 1 WHERE user_id = {message.from_user.id}")
    cdb.execute(f"UPDATE users SET wrong_ans = wrong_ans + 1 WHERE user_id = {message.from_user.id}")
    db.commit()
    db.close()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ")
    item2 = types.KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
    item3 = types.KeyboardButton('/stats')
    item4 = types.KeyboardButton('/help')
    markup.add(item1, item2)
    markup.add(item3, item4)
    await User.end_ans.set()
    await bot.send_message(message.from_user.id, '–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ?', reply_markup=markup)


@dp.message_handler(state=User.answer)
async def first_answer(message: types.Message, state: FSMContext):
    answer = message.text
    t.cancel()
    data = await state.get_data()
    if answer.lower() == data['answer'].lower():
        db = sqlite3.connect(DB_PATH_USER)
        cdb = db.cursor()
        update_right_ans(cdb, message)
        cdb.execute(f"UPDATE users SET all_ans = all_ans + 1 WHERE user_id = {message.from_user.id}")
        cdb.execute(f"UPDATE users SET right_ans = right_ans + 1 WHERE user_id = {message.from_user.id}")
        cdb.execute(f"UPDATE users SET right_today = right_today + 1 WHERE user_id = {message.from_user.id}")
        db.commit()
        db.close()
        await bot.send_message(message.from_user.id, '–≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!üéâ')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ")
        item2 = types.KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
        item3 = types.KeyboardButton('/stats')
        item4 = types.KeyboardButton('/help')
        markup.add(item1, item2)
        markup.add(item3, item4)
        await User.end_ans.set()
        await bot.send_message(message.from_user.id, '–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ?', reply_markup=markup)
    elif ''.join(answer.lower().split()) == '/start':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item = types.KeyboardButton("/start")
        item1 = types.KeyboardButton('/stats')
        item2 = types.KeyboardButton('/help')
        markup.add(item, item1, item2)
        await state.reset_state(with_data=False)
        await bot.send_message(message.from_user.id, '–ù–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–∞!', reply_markup=markup)
    else:
        db = sqlite3.connect(DB_PATH_USER)
        cdb = db.cursor()
        update_right_ans(cdb, message)
        cdb.execute(f"UPDATE users SET all_ans = all_ans + 1 WHERE user_id = {message.from_user.id}")
        cdb.execute(f"UPDATE users SET wrong_ans = wrong_ans + 1 WHERE user_id = {message.from_user.id}")
        db.commit()
        db.close()
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ")
        item2 = types.KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è")
        item3 = types.KeyboardButton('/stats')
        item4 = types.KeyboardButton('/help')
        markup.add(item1, item2)
        markup.add(item3, item4)
        await User.end_ans.set()
        await bot.send_message(message.from_user.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.', reply_markup=markup)
        await bot.send_message(message.from_user.id, f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data["answer"]}',
                               parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(state=User.end_ans)
async def process_end_ans(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        com = message.text
        if com.lower() == '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item = types.KeyboardButton(f"{data['predmet']}")
            item1 = types.KeyboardButton('/stats')
            item2 = types.KeyboardButton('/help')
            markup.add(item)
            markup.add(item1, item2)
            await User.predmet.set()
            await bot.send_message(message.from_user.id, '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', reply_markup=markup)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item = types.KeyboardButton("/start")
            item1 = types.KeyboardButton('/stats')
            item2 = types.KeyboardButton('/help')
            markup.add(item, item1, item2)
            await state.reset_state(with_data=False)
            await bot.send_message(message.from_user.id, '–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!üëã', reply_markup=markup)


def str_percent(name, right, total):
    if total == 0:
        return f'{name}: 0(0%)'
    return f'{name}: {right} ({round((right) * 100 / total, 2)}%)\n'


def str_name(name, right):
    return f'{name}: {right}\n'


@dp.message_handler(state='*', commands=['bestofthebest'])
@dp.message_handler(lambda message: message.text.lower() == 'bestofthebest', state='*')
async def best_handler(message: types.Message):
    db = sqlite3.connect(DB_PATH_USER)
    cdb = db.cursor()
    result = cdb.execute(f"SELECT user_name, right_ans, all_ans FROM users ORDER BY -right_ans LIMIT 5;").fetchall()
    for elem in result:
        await bot.send_message(message.from_user.id, md.text(md.text(md.bold('–õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ –≤—Å–µ—Ö –≤—Ä–µ–º—ë–Ωüìä:')),
                                                             md.text(str_percent(elem[0], elem[1], elem[2])),
                                                             sep='\n'), parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(state='*', commands=['thebest'])
@dp.message_handler(lambda message: message.text.lower() == 'thebest', state='*')
async def best_handler(message: types.Message):
    db = sqlite3.connect(DB_PATH_USER)
    cdb = db.cursor()
    result = cdb.execute(f"SELECT user_name, right_today, all_ans FROM users ORDER BY -right_today LIMIT 5;").fetchall()
    for elem in result:
        await bot.send_message(message.from_user.id, md.text(md.text(md.bold('–õ—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏ –¥–Ω—èüìä:')),
                                                             md.text(str_name(elem[0], elem[1])),
                                                             sep='\n'), parse_mode=ParseMode.MARKDOWN)


if __name__ == '__main__':
    executor.start_polling(dp, loop=loop, skip_updates=True)